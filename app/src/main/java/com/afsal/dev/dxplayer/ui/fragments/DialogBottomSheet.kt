package com.afsal.dev.dxplayer.ui.fragmentsimport android.app.Dialogimport android.content.ComponentNameimport android.content.Contextimport android.content.Intentimport android.content.ServiceConnectionimport android.os.Buildimport android.os.Bundleimport android.os.IBinderimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.view.WindowManagerimport android.widget.SeekBarimport androidx.lifecycle.Observerimport com.afsal.dev.dxplayer.Rimport com.afsal.dev.dxplayer.databinding.BottomSheetDialogBindingimport com.afsal.dev.dxplayer.models.audioSections.MusicItemimport com.afsal.dev.dxplayer.ui.services.MusicServiceimport com.afsal.dev.dxplayer.utills.CoreUttilesimport com.google.android.exoplayer2.Playerimport com.google.android.material.bottomsheet.BottomSheetBehaviorimport com.google.android.material.bottomsheet.BottomSheetDialogimport com.google.android.material.bottomsheet.BottomSheetDialogFragmentclass DialogBottomSheet : BottomSheetDialogFragment() {    private val TAG="DialogBottomSheet"    private lateinit var currentSong: MusicItem    private lateinit var binding: BottomSheetDialogBinding    override fun onCreateView(        inflater: LayoutInflater,        container: ViewGroup?,        savedInstanceState: Bundle?    ): View {        binding = BottomSheetDialogBinding.inflate(inflater, container, false)        return binding.rootLayout    }    //inflater.inflate(R.layout.bottom_sheet_dialog,container,false)    private var musicService: MusicService? = null    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {        //  setStatusBarColor(R.color.button_color)        val dialog = BottomSheetDialog(requireContext(), theme)        dialog.setOnShowListener {            val bottomSheetDialog = it as BottomSheetDialog            val parentLayout =                bottomSheetDialog.findViewById<View>(com.google.android.material.R.id.design_bottom_sheet)            parentLayout?.let { it ->                val behaviour = BottomSheetBehavior.from(it)                setupFullHeight(it)                behaviour.state = BottomSheetBehavior.STATE_EXPANDED            }        }        return dialog        //  return super.onCreateDialog(savedInstanceState)    }  private  fun closeDialog(){        dialog!!.cancel()    }    private val connection = object : ServiceConnection {        override fun onServiceConnected(name: ComponentName?, service: IBinder?) {            val binder = service as MusicService.MyBinder            musicService = binder.currentService()            Log.d(TAG, "MusicService connected dialog fragment $name")            musicService!!.currentSong.observe(viewLifecycleOwner, Observer {                updateTittle(it)                currentSong = it            })            musicService!!.repeatMode.observe(viewLifecycleOwner, Observer { repeatMode->                 updateRepeatMode(repeatMode)            })            musicService!!.currentPosition.observe(viewLifecycleOwner, Observer { currenPosition ->                updateProgress(currenPosition, currentSong)            })        musicService!!.isPlayingLiveData.observe(viewLifecycleOwner, Observer { isplaying->            binding.exoPlayPause.setImageResource( if (isplaying == true)                R.drawable.ic_baseline_pause_circle_outline_48 else R.drawable.ic_baseline_play_48)        })            binding.apply {                exoPlayPause.setOnClickListener { musicService!!.playOrPauseSong() }                exoNext.setOnClickListener { musicService!!.playNext() }                exoPrev.setOnClickListener { musicService!!.playPrev() }                exoShuffle.setOnClickListener { CoreUttiles.showSnackBar("not implemented yet",binding.rootLayout,"") {} }                exoRepeat.setOnClickListener {musicService!!.setRepeatMode() }                favBt.setOnClickListener {   }                playListBt.setOnClickListener {CoreUttiles.showSnackBar("not implemented yet",binding.rootLayout,"") {} }                cancelBt.setOnClickListener { closeDialog()}                optionBt.setOnClickListener {CoreUttiles.showSnackBar("not implemented yet",binding.rootLayout,"") {} }                seekBar.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {                    override fun onProgressChanged(                        seekBar: SeekBar?,                        progress: Int,                        fromUser: Boolean                    ) {                    }                    override fun onStartTrackingTouch(seekBar: SeekBar?) {}                    override fun onStopTrackingTouch(seekBar: SeekBar?) {                        if (seekBar != null) {                            Log.d(TAG, "Seekbar stop seek ${seekBar.progress}")                            val p = seekBar.progress                            musicService!!.seekToPosition(p.toFloat())                        }                    }                })            }        }        override fun onServiceDisconnected(name: ComponentName?) {            Log.d("DDD", "MusicService Disconnected dialog fragment $name")        }    }    private fun updateRepeatMode(mode:Int){        when(mode){            Player.REPEAT_MODE_ONE-> binding.exoRepeat.setImageResource(R.drawable.ic_baseline_repeat_one_24)            Player.REPEAT_MODE_ALL-> binding.exoRepeat.setImageResource(R.drawable.ic_baseline_repeat_on_24)            Player.REPEAT_MODE_OFF->binding.exoRepeat.setImageResource(R.drawable.ic_baseline_repeat_24)        }    }    private fun updateProgress(currentPosition: Long, song: MusicItem) {        val p = currentPosition.toFloat()        val d = song.duration.toFloat()        val progress = p.div(d) * 100        binding.apply {            seekBar.progress = progress.toInt()            playerPosition.text = CoreUttiles.durationToHour(currentPosition)            duration.text = CoreUttiles.durationToHour(song.duration)        }    }    override fun onStart() {        super.onStart()        val intent = Intent(requireContext(), MusicService::class.java)        requireContext().bindService(intent, connection, Context.BIND_AUTO_CREATE)        // requireActivity().stopService(intent)    }    private fun updateTittle(song: MusicItem) {        binding.titleText.text = song.tittle        CoreUttiles.loadImageIntoView(            song.imageUri,            binding.songImage,            null,            CoreUttiles.IMAGE_VIEW        )    }    fun setStatusBarColor(color: Int) {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {            requireActivity().window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS)            requireActivity().window.statusBarColor = color        }    }    private fun setupFullHeight(bottomSheet: View) {        val layoutParams = bottomSheet.layoutParams        layoutParams.height = WindowManager.LayoutParams.MATCH_PARENT        bottomSheet.layoutParams = layoutParams    }    override fun onDestroy() {        super.onDestroy()    }}