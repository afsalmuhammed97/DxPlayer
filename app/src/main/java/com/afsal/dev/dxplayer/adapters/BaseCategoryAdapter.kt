package com.afsal.dev.dxplayer.adaptersimport android.content.DialogInterfaceimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport androidx.recyclerview.widget.AsyncListDifferimport androidx.recyclerview.widget.DiffUtilimport androidx.recyclerview.widget.LinearLayoutManagerimport androidx.recyclerview.widget.RecyclerViewimport com.afsal.dev.dxplayer.databinding.BaseRvItemBindingimport com.afsal.dev.dxplayer.interfacess.OnItemClickListnerimport com.afsal.dev.dxplayer.models.VideoSections.Foldersimport com.afsal.dev.dxplayer.models.VideoSections.VideoItemModelclass BaseCategoryAdapter(private val buttonClick:((ListPosition:Int)->Unit),                          private val videoItemOnClick:((folderPosition:Int,                                                         videoPosition:Int,                                                         video:VideoItemModel                          )->Unit)) :RecyclerView.Adapter<BaseCategoryAdapter.CategoryItemHolder>(){ inner   class CategoryItemHolder(val binding: BaseRvItemBinding):RecyclerView.ViewHolder(binding.root), View.OnClickListener {     init {         binding.showMore.setOnClickListener(this)     }     override fun onClick(v: View?) {         val position = absoluteAdapterPosition         if (position != RecyclerView.NO_POSITION) {             buttonClick(position)         }     }          fun bind(folderItem:Folders){              if (folderItem.videosList.size<=3){                  binding.showMore.visibility=View.GONE              }else{                  binding.showMore.visibility=View.VISIBLE              }              binding.categoryName.text=folderItem.folderName              val videosAdapter =VideosAdapter(folderItem.videosList){position,video->                                  val folderPosition=absoluteAdapterPosition                                  if (folderPosition != RecyclerView.NO_POSITION){                                      videoItemOnClick(folderPosition,position,video)                                  }              }              binding.videosRv.apply {                  layoutManager= LinearLayoutManager(context, LinearLayoutManager.HORIZONTAL, false)                  adapter=videosAdapter              }          } }    private val diffCallback= object :DiffUtil.ItemCallback<Folders>(){        override fun areItemsTheSame(oldItem: Folders, newItem: Folders): Boolean {            return oldItem.folderName== newItem.folderName        }        override fun areContentsTheSame(oldItem: Folders, newItem: Folders): Boolean {           return  oldItem==newItem        }    }    val differ= AsyncListDiffer(this,diffCallback)    override fun onCreateViewHolder(        parent: ViewGroup,        viewType: Int    ): BaseCategoryAdapter.CategoryItemHolder {     return  CategoryItemHolder(BaseRvItemBinding.inflate(LayoutInflater.from(parent.context),parent,false))    }    override fun onBindViewHolder(        holder: BaseCategoryAdapter.CategoryItemHolder, position: Int) {                               holder.bind(differ.currentList[position])    }    override fun getItemCount()=differ.currentList.size}