package com.afsal.dev.dxplayer.ui.servicesimport android.app.Serviceimport android.content.Intentimport android.os.Binderimport android.os.IBinderimport android.support.v4.media.session.MediaSessionCompatimport android.util.Logimport androidx.lifecycle.MutableLiveDataimport com.afsal.dev.dxplayer.models.audioSections.MusicItemimport com.google.android.exoplayer2.*import com.google.android.exoplayer2.trackselection.AdaptiveTrackSelectionimport com.google.android.exoplayer2.trackselection.DefaultTrackSelectorclass MusicService : Service() {    private val TAG="MusicService"     private var currentIndex=0      val playerState=MutableLiveData<Player.Event?>()      val songsList=MutableLiveData<List<MusicItem>>()      val isPlayingLiveData=MutableLiveData<Boolean>()    private var listSize=songsList.value?.size    private  lateinit var mediaSession: MediaSessionCompat    private lateinit var exoPlayer: ExoPlayer    private lateinit var trackSelector: DefaultTrackSelector    override fun onBind(intent: Intent?): IBinder? {             mediaSession= MediaSessionCompat(baseContext,TAG)        return  this.MyBinder()    }    override fun onStart(intent: Intent?, startId: Int) {        super.onStart(intent, startId)    }    fun initPlayer() {        //  trackSelector= DefaultTrackSelector(this)        exoPlayer = ExoPlayer.Builder(this)            .setSeekBackIncrementMs(5000)            .setSeekForwardIncrementMs(5000)            .build()    }    override fun onCreate() {        super.onCreate()        initPlayer()    }     fun setMediaItem(song:MusicItem){            val mediaItem = MediaItem.fromUri(song.artUri)            exoPlayer.setMediaItem(mediaItem)            exoPlayer.addListener(this.playerEvents())            exoPlayer.prepare()            exoPlayer.play()         currentIndex= songsList.value?.indexOf(song) ?: 0    }    fun playOrPauseSong(){        if (exoPlayer.isPlaying)  exoPlayer.pause() else exoPlayer.play()    }     fun playNext(){         if (songsList.value?.size?.minus(1) ==currentIndex )             setMediaItem(songsList.value!![0])         else             setMediaItem(songsList.value!![currentIndex+1])     }    fun playPrev(){        if (currentIndex==0)            setMediaItem(songsList.value!![songsList.value!!.size.minus(1)])        else            setMediaItem(songsList.value!![currentIndex-1])    }    inner class MyBinder:Binder(){        fun currentService():MusicService{            return  this@MusicService        }    }    inner class playerEvents(): Player.Listener {        override fun onPlayerStateChanged(playWhenReady: Boolean, playbackState: Int) {            Log.d("SSS","playerstate changes  $playbackState          $playWhenReady playwhen ready")            super.onPlayerStateChanged(playWhenReady, playbackState)        }        override fun onPlaybackStateChanged(playbackState: Int) {            Log.d("SSS","playback                     changes $playbackState")            super.onPlaybackStateChanged(playbackState)        }        override fun onSeekBackIncrementChanged(seekBackIncrementMs: Long) {            Log.d("SSS","seek            changes $seekBackIncrementMs")            super.onSeekBackIncrementChanged(seekBackIncrementMs)        }        override fun onSeekForwardIncrementChanged(seekForwardIncrementMs: Long) {            Log.d("SSS","seek  forward changes $seekForwardIncrementMs")            super.onSeekForwardIncrementChanged(seekForwardIncrementMs)        }        override fun onIsPlayingChanged(isPlaying: Boolean) {            Log.d("SSS","    isPlaying changed $isPlaying")            this@MusicService.isPlayingLiveData.value=isPlaying            super.onIsPlayingChanged(isPlaying)        }        override fun onSeekProcessed() {            super.onSeekProcessed()        }    }}