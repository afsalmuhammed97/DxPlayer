package com.afsal.dev.dxplayer.ui.servicesimport android.app.Serviceimport android.content.Intentimport android.media.session.PlaybackStateimport android.os.Binderimport android.os.Handlerimport android.os.IBinderimport android.os.Looperimport android.support.v4.media.session.MediaSessionCompatimport android.support.v4.media.session.PlaybackStateCompatimport android.util.Logimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport com.afsal.dev.dxplayer.models.audioSections.MusicItemimport com.google.android.exoplayer2.*import com.google.android.exoplayer2.Player.MEDIA_ITEM_TRANSITION_REASON_AUTOimport com.google.android.exoplayer2.Player.MEDIA_ITEM_TRANSITION_REASON_SEEKimport com.google.android.exoplayer2.text.Cueimport com.google.android.exoplayer2.trackselection.DefaultTrackSelectorclass MusicService : Service() {    private val TAG = "MusicService"    private var currentIndex = 0    private val _currentSong = MutableLiveData<MusicItem>()    val currentSong: LiveData<MusicItem> = _currentSong    val songsList = MutableLiveData<List<MusicItem>>()    private val _isPlayingLiveData = MutableLiveData<Boolean>()    val isPlayingLiveData: LiveData<Boolean> = _isPlayingLiveData    private val currentPlayBackPosition = MutableLiveData<Long>()    val currentPosition: LiveData<Long> = currentPlayBackPosition    private val _playbackState = MutableLiveData<Int>()    val playbackState: LiveData<Int> = _playbackState    private lateinit var handler: Handler    private val mSeekbarUpdateHandler = Handler()    private lateinit var mediaSession: MediaSessionCompat    private lateinit var exoPlayer: ExoPlayer    private lateinit var trackSelector: DefaultTrackSelector    override fun onBind(intent: Intent?): IBinder? {        mediaSession = MediaSessionCompat(baseContext, TAG)        return this.MyBinder()    }    override fun onStart(intent: Intent?, startId: Int) {        super.onStart(intent, startId)    }    fun initPlayer() {        //  trackSelector= DefaultTrackSelector(this)        exoPlayer = ExoPlayer.Builder(this)            .setSeekBackIncrementMs(5000)            .setSeekForwardIncrementMs(5000)            .build()        exoPlayer.addListener(this.playerEvents())    }    override fun onCreate() {        super.onCreate()        initPlayer()        handler = Handler(Looper.getMainLooper())    }    fun stopPlayer() {        if (exoPlayer.isPlaying) exoPlayer.pause()        exoPlayer.stop()    }    fun setMediaItem(song: MusicItem) {        currentIndex = songsList.value?.indexOf(song) ?: 0        val mediaItem = MediaItem.fromUri(song.artUri)        exoPlayer.setMediaItem(mediaItem)        exoPlayer.prepare()        exoPlayer.play()        setMediaItemsToPlayer()    }    fun playOrPauseSong() {        if (exoPlayer.isPlaying) exoPlayer.pause() else exoPlayer.play()    }    fun playNext() {        if (songsList.value?.size?.minus(1) == currentIndex)            setMediaItem(songsList.value!![0])        else            setMediaItem(songsList.value!![currentIndex + 1])    }    fun playPrev() {        if (currentIndex == 0)            setMediaItem(songsList.value!![songsList.value!!.size.minus(1)])        else            setMediaItem(songsList.value!![currentIndex - 1])    }    fun seekToPosition(position:Long){        if (exoPlayer!=null  )            exoPlayer.seekTo(position)    }    private fun setMediaItemsToPlayer() {        exoPlayer.clearMediaItems()        val mediaItems = mutableListOf<MediaItem>()        for (i in currentIndex until songsList.value?.size?.minus(1)!!) {            mediaItems.add(MediaItem.fromUri(songsList.value!![i].artUri))        }        exoPlayer.setMediaItems(mediaItems)    }    inner class MyBinder : Binder() {        fun currentService(): MusicService {            return this@MusicService        }    }    inner class playerEvents() : Player.Listener {        override fun onPlayerStateChanged(playWhenReady: Boolean, playbackState: Int) {            if (playbackState == PlaybackStateCompat.STATE_SKIPPING_TO_NEXT) {                Log.d("SSS", "playback skipping to next")            } else if (playbackState == PlaybackState.STATE_SKIPPING_TO_NEXT) {                Log.d("SSS", "playback skipping to next2")            }            when (playbackState) {                PlaybackState.STATE_PLAYING -> {}                PlaybackState.STATE_PAUSED -> {}                PlaybackState.STATE_BUFFERING -> {}                PlaybackState.STATE_PLAYING -> {}            }            super.onPlayerStateChanged(playWhenReady, playbackState)        }        override fun onPlaybackStateChanged(playbackState: Int) {            _playbackState.postValue(playbackState)            super.onPlaybackStateChanged(playbackState)        }        override fun onSeekBackIncrementChanged(seekBackIncrementMs: Long) {            Log.d("SSS", "seek            changes $seekBackIncrementMs")            super.onSeekBackIncrementChanged(seekBackIncrementMs)        }        override fun onSeekForwardIncrementChanged(seekForwardIncrementMs: Long) {            Log.d("SSS", "seek  forward changes $seekForwardIncrementMs")            super.onSeekForwardIncrementChanged(seekForwardIncrementMs)        }        override fun onIsPlayingChanged(isPlaying: Boolean) {            Log.d("SSS", "    isPlaying changed $isPlaying")            this@MusicService._isPlayingLiveData.value = isPlaying            this@MusicService._currentSong.value = songsList.value!![currentIndex]            this@MusicService.updateProgress(isPlaying)            super.onIsPlayingChanged(isPlaying)        }        override fun onMediaItemTransition(mediaItem: MediaItem?, reason: Int) {            when (reason) {                MEDIA_ITEM_TRANSITION_REASON_AUTO -> {                    currentIndex += 1                    Log.d("SSSS", "medeaItem changed $mediaItem       reason auto $reason")                    this@MusicService._currentSong.value = songsList.value!![currentIndex]                }                MEDIA_ITEM_TRANSITION_REASON_SEEK -> {                    Log.d("SSSS", "medeaItem changed $mediaItem       reason $reason")                }            }            super.onMediaItemTransition(mediaItem, reason)        }        override fun onEvents(player: Player, events: Player.Events) {            Log.d("EEEE", "player events  ${events.toString()}")            super.onEvents(player, events)        }        override fun onTimelineChanged(timeline: Timeline, reason: Int) {            Log.d("TTT", "onTimeline  $timeline   reason $reason ")            super.onTimelineChanged(timeline, reason)        }    }    private fun updateProgress(isPlaying: Boolean) {        if (isPlaying)            mSeekbarUpdateHandler.postDelayed(mUpdateSeekbar, 0)        else            mSeekbarUpdateHandler.removeCallbacks(mUpdateSeekbar)    }    private val mUpdateSeekbar: Runnable = object : Runnable {        override fun run() {            currentPlayBackPosition.postValue(exoPlayer.currentPosition)            mSeekbarUpdateHandler.postDelayed(this, 1000)        }    }}