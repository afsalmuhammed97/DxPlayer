package com.afsal.dev.dxplayer.dataBaseimport androidx.lifecycle.LiveDataimport androidx.room.*import com.afsal.dev.dxplayer.models.audioSections.MusicItemimport com.afsal.dev.dxplayer.models.audioSections.PlayListWithSongsimport com.afsal.dev.dxplayer.models.audioSections.PlayLists@Daointerface MusicDao {    @Insert(onConflict = OnConflictStrategy.REPLACE)    suspend fun createPlayList(playLists: PlayLists)         //pass the playList name    @Update    suspend fun updateSongCountInPlayList(playLists: PlayLists)//    @Insert(onConflict = OnConflictStrategy.REPLACE)              //   fun 1//    suspend fun insertSongIntoSongsTable(song: MusicItem)          //insert single song into songTable    //fun 1 and 2 should call to add a song to playlist    @Insert(onConflict = OnConflictStrategy.REPLACE)                             //fun 2    suspend fun insertSongsIntoPlayList(playListWithSongs: PlayListWithSongs)      //to add a song to playList    //to get all playlist names    @Transaction    @Query("SELECT * FROM play_list_table ORDER BY playListName ASC ")    fun getAllPlayList(): LiveData<List<PlayLists>>    @Transaction    @Query("SELECT * FROM play_list_table WHERE playListName =:playListName ")    fun getPlayListData(playListName: String): PlayLists    //to get all song id s included in a playList    @Transaction    @Query("SELECT * FROM play_list_song_table WHERE PlayListName = :playListName ")    suspend fun getAllSongsInPlayList(playListName: String): List<PlayListWithSongs>    @Query("DELETE FROM play_list_song_table WHERE id =:songId AND PlayListName =:playListName")    suspend fun deleteSongFromPlayList(songId: Long, playListName: String)    @Query("DELETE FROM play_list_song_table WHERE PlayListName =:playListName")    suspend fun deleteAllSongsFromPlayList(playListName: String)    @Query("DELETE FROM PLAY_LIST_TABLE WHERE playListName =:playListName")    suspend fun deletePlaylistNameFromPlayList(playListName: String)    @Query("SELECT EXISTS (SELECT 1 FROM play_list_song_table WHERE id = :id AND PlayListName =:playListName)")    suspend fun existsSong(id: Long, playListName: String): Boolean//    @Query("SELECT * FROM user_table ORDER BY  id ASC")////    fun   readAllData(): LiveData<List<User>>}